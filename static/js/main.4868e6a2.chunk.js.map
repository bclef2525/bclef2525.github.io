{"version":3,"sources":["Assets/Image/air_bnb_main.png","components/MenuIcon/MenuIcon.tsx","components/Intro/Intro.tsx","components/Product/Product.tsx","components/Article/Article.tsx","pages/Main/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","hide","keyframes","rise","MenuIcon","props","console","log","hideState","Container","onClick","Inner","Dot","HideDot","RiseDot","styled","div","Intro","Relative","TextContainer","style","fontSize","TextMove","Product","Subtitle","ImageContainer","Image","src","image","ImageMove","img","Article","content","map","Content","Main","useState","setHide","MainPage","Header","airBnB","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,0C,43CCQ3C,IAAMC,EAAOC,YAAH,KAUJC,EAAOD,YAAH,KAqCKE,EA1BE,SAACC,GAGhB,OAFAC,QAAQC,IAAIF,EAAMG,WAGhB,oCACE,kBAACC,EAAD,CAAWC,QAASL,EAAMK,SACxB,kBAACC,EAAD,KACE,kBAACC,EAAD,MACCP,EAAMG,UAAY,kBAACK,EAAD,MAAsB,kBAACC,EAAD,MACzC,kBAACF,EAAD,OAEF,kBAACD,EAAD,KACGN,EAAMG,UAAY,kBAACK,EAAD,MAAsB,kBAACC,EAAD,MACzC,kBAACF,EAAD,MACCP,EAAMG,UAAY,kBAACK,EAAD,MAAsB,kBAACC,EAAD,OAE3C,kBAACH,EAAD,KACE,kBAACC,EAAD,MACCP,EAAMG,UAAY,kBAACK,EAAD,MAAsB,kBAACC,EAAD,MACzC,kBAACF,EAAD,UASJH,EAAYM,IAAOC,IAAV,KAMTL,EAAQI,IAAOC,IAAV,KAKLJ,EAAMG,IAAOC,IAAV,KAOHH,EAAUE,IAAOC,IAAV,IACEf,GASTa,EAAUC,IAAOC,IAAV,IACEb,G,8wBCjFf,IA0Bec,EA1BD,SAACZ,GACb,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAACa,EAAD,KACE,kBAACC,EAAD,CAAeC,MAAO,CAAEC,SAAU,SAAlC,oCAIF,kBAACH,EAAD,KACE,kBAACC,EAAD,4DAKF,kBAACD,EAAD,KACE,kBAACC,EAAD,mDAYJG,EAAWpB,YAAH,KAQRO,EAAYM,IAAOC,IAAV,KAKTL,EAAQI,IAAOC,IAAV,KAKLE,EAAWH,IAAOC,IAAV,KAGRG,EAAgBJ,IAAOC,IAAV,IACJM,G,w3BChDf,IAaeC,EAbC,SAAClB,GACf,OACE,kBAAC,EAAD,KACE,kBAACmB,EAAD,oDACA,kBAAC,EAAD,KACE,kBAACC,EAAD,KACE,kBAACC,EAAD,CAAOC,IAAKtB,EAAMuB,YAQtBC,EAAY3B,YAAH,KAWTO,EAAYM,IAAOC,IAAV,KAQTL,EAAQI,IAAOC,IAAV,KAILS,EAAiBV,IAAOC,IAAV,KAIdU,EAAQX,IAAOe,IAAV,IAEID,GAITL,EAAWT,IAAOC,IAAV,K,4YCjDd,IAaee,EAbC,SAAC1B,GAMf,OACE,oCACE,kBAAC,GAAD,KAAwBA,EAAM2B,QANhBC,KAAI,SAAC5B,GACnB,OAAO,kBAAC6B,GAAD,KAAU7B,SAYjBI,GAAYM,IAAOC,IAAV,KASTkB,GAAUnB,IAAOC,IAAV,K,kSClBb,IAuBemB,GAvBF,SAAC9B,GAAkB,IAAD,EACL+B,oBAA8B,GADzB,mBACtBnC,EADsB,KAChBoC,EADgB,KAK7B,OACE,kBAACC,GAAD,KAEE,kBAACC,GAAD,KACE,kBAAC,EAAD,CAAU7B,QAPG,WACjB2B,GAASpC,IAM0BO,UAAWP,KAE5C,kBAAC,EAAD,MACA,kBAAC,EAAD,CACE+B,QAAS,CACP,iKACA,0IAGJ,kBAAC,EAAD,CAASJ,MAAOY,QAOhBF,GAAWvB,IAAOC,IAAV,MAQRuB,GAASxB,IAAOC,IAAV,MC9BGyB,GARO,WACpB,OACE,oCACE,kBAAC,GAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4868e6a2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/air_bnb_main.6ee36e9f.png\";","import React from \"react\";\nimport styled, { css, keyframes } from \"styled-components\";\n\ninterface Props {\n  hideState?: Boolean | undefined;\n  onClick: () => void;\n}\n\nconst hide = keyframes`\n   {\n    from {\n      opacity: 1;\n    }\n    to {\n      opacity: 0;\n    }\n  }\n`;\nconst rise = keyframes`\n   {\n    from {\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n    }\n  }\n`;\n\nconst MenuIcon = (props: Props) => {\n  console.log(props.hideState);\n\n  return (\n    <>\n      <Container onClick={props.onClick}>\n        <Inner>\n          <Dot></Dot>\n          {props.hideState ? <HideDot></HideDot> : <RiseDot></RiseDot>}\n          <Dot></Dot>\n        </Inner>\n        <Inner>\n          {props.hideState ? <HideDot></HideDot> : <RiseDot></RiseDot>}\n          <Dot></Dot>\n          {props.hideState ? <HideDot></HideDot> : <RiseDot></RiseDot>}\n        </Inner>\n        <Inner>\n          <Dot></Dot>\n          {props.hideState ? <HideDot></HideDot> : <RiseDot></RiseDot>}\n          <Dot></Dot>\n        </Inner>\n      </Container>\n    </>\n  );\n};\n\nexport default MenuIcon;\n\nconst Container = styled.div`\n  width: 50px;\n  height: 100%;\n  padding: 4px;\n  z-index: 11;\n`;\nconst Inner = styled.div`\n  display: flex;\n  width: 100%;\n`;\n\nconst Dot = styled.div`\n  margin: 5px auto;\n  background-color: #ffffff;\n  width: 5px;\n  height: 5px;\n  translate: rotate(30);\n`;\nconst HideDot = styled.div`\n  animation: ${hide} 0.3s ease-in;\n  animation-fill-mode: both;\n  margin: 5px auto;\n  background-color: #ffffff;\n  width: 5px;\n  height: 5px;\n  translate: rotate(30);\n`;\n\nconst RiseDot = styled.div`\n  animation: ${rise} 0.3s ease-in;\n  animation-fill-mode: both;\n  margin: 5px auto;\n  background-color: #ffffff;\n  width: 5px;\n  height: 5px;\n  translate: rotate(30);\n`;\n","import React from \"react\";\nimport styled, { keyframes } from \"styled-components\";\n\ninterface Props {}\n\nconst Intro = (props: Props) => {\n  return (\n    <Container>\n      <Inner>\n        <Relative>\n          <TextContainer style={{ fontSize: \"80px\" }}>\n            안녕하세요!\n          </TextContainer>\n        </Relative>\n        <Relative>\n          <TextContainer>\n            {/* style={{ animationDelay: \"8.5s\" }} */}\n            프론트 엔드 개발자\n          </TextContainer>\n        </Relative>\n        <Relative>\n          <TextContainer>\n            {/* style={{ animationDelay: \"9s\" }} */}\n            조인호 입니다.\n          </TextContainer>\n        </Relative>\n      </Inner>\n    </Container>\n  );\n};\n\nexport default Intro;\n\nconst TextMove = keyframes`\n    from{\n        opacity:0    \n    }\n    to{\n        opacity:1\n    }\n`;\nconst Container = styled.div`\n  width: 100%;\n  height: 50vh;\n`;\n\nconst Inner = styled.div`\n  margin: 80px auto;\n  width: 80%;\n  height: 80%;\n`;\nconst Relative = styled.div`\n  position: relative;\n`;\nconst TextContainer = styled.div`\n  animation: ${TextMove} 2s ease-in;\n  //   animation-delay: 8s;\n  animation-fill-mode: both;\n  opacity: 0;\n  font-size: 60px;\n  font-weight: 800;\n  text-align: center;\n  margin: 10px 0;\n  width: 100%;\n  height: 32%;\n  line-height: 100px;\n`;\n","import React from \"react\";\nimport styled, { keyframes } from \"styled-components\";\n\ninterface Props {\n  image: string;\n}\n\nconst Product = (props: Props) => {\n  return (\n    <Container>\n      <Subtitle>호텔예약 사이트</Subtitle>\n      <Inner>\n        <ImageContainer>\n          <Image src={props.image}></Image>\n        </ImageContainer>\n      </Inner>\n    </Container>\n  );\n};\n\nexport default Product;\nconst ImageMove = keyframes`\n    0% {\n        opacity:0\n    }\n    70%{\n        opacity:0\n    }\n    100%{\n        opacity:1\n    }\n`;\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 1200px;\n  justify-content: center;\n  align-items: center;\n`;\nconst Inner = styled.div`\n  width: 70%;\n  height: 100%;\n`;\nconst ImageContainer = styled.div`\n  width: 100%;\n  height: 75%;\n`;\nconst Image = styled.img`\n  //   animation-delay: 8s;\n  animation: ${ImageMove} 2s ease-in;\n  width: 100%;\n  height: 100%;\n`;\nconst Subtitle = styled.div`\n  font-size: 40px;\n  font-weight: 800;\n  margin-bottom: 20px;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\ninterface Props {\n  content: Array<string>;\n}\nconst Article = (props: Props) => {\n  const mapToConten = (contents: Array<string>): any => {\n    return contents.map((props: string) => {\n      return <Content>{props}</Content>;\n    });\n  };\n  return (\n    <>\n      <Container>{mapToConten(props.content)}</Container>\n    </>\n  );\n};\n\nexport default Article;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  widht: 100%;\n  line-height: 30px;\n  font-size: 25px;\n  margin-bottom: 150px;\n`;\nconst Content = styled.div`\n  width: 100%;\n  margin-top: 12px;\n  font-weight: 700;\n  text-align: center;\n`;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport MenuIcon from \"../../components/MenuIcon\";\nimport Splash from \"../Splash\";\nimport Modal from \"../../components/Modal\";\nimport Intro from \"../../components/Intro\";\nimport Product from \"../../components/Product\";\nimport airBnB from \"../../Assets/Image/air_bnb_main.png\";\nimport Article from \"../../components/Article\";\ninterface Props {}\n\nconst Main = (props: Props) => {\n  const [hide, setHide] = useState<Boolean | undefined>(false);\n  const handleIcon = (): void => {\n    setHide(!hide);\n  };\n  return (\n    <MainPage>\n      {/* <Splash></Splash> */}\n      <Header>\n        <MenuIcon onClick={handleIcon} hideState={hide}></MenuIcon>\n      </Header>\n      <Intro></Intro>\n      <Article\n        content={[\n          \"과정을 즐기고 성과를 내는 행복한 개발자를 꿈꾸고 있습니다.\",\n          \"끊임없는 노력으로 지속적인 성장을 하고 싶습니다.\"\n        ]}\n      ></Article>\n      <Product image={airBnB}></Product>\n    </MainPage>\n  );\n};\n\nexport default Main;\n\nconst MainPage = styled.div`\n  position: relative;\n  color: #ffffff;\n  width: 100vw;\n  min-height: 100vh;\n  background-color: #161616;\n`;\n\nconst Header = styled.div`\n  width: 100%;\n  height: 60px;\n`;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\nimport Main from \"./pages/Main\";\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <Main></Main>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}